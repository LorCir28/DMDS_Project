//script 1) import csv files with country_id for cities
// Import continents from continents.csv
LOAD CSV WITH HEADERS FROM 'file:///continents.csv' AS row1
CREATE (cont:Continent {id:row1.id, name:row1.name});

// Import subcontinents from subcontinents.csv and connect them to continents
LOAD CSV WITH HEADERS FROM 'file:///subcontinents.csv' AS row2
MATCH (cont:Continent {id: row2.continent_id})
CREATE (sub:Subcontinent {id: row2.id, name: row2.name})
CREATE (sub)-[:BELONGS_TO_CONTINENT]->(cont);

// import countries from countries.csv and connect them to continents and subcontinents
LOAD CSV WITH HEADERS FROM 'file:///countries.csv' AS row3
MATCH (cont:Continent {id: row3.continent_id})
MATCH (sub:Subcontinent {id: row3.subcontinent_id})
CREATE (cou:Country {
    id: row3.id, 
    name: row3.name, 
    iso3: row3.iso3, 
    phone_code: row3.phone_code, 
    capital: row3.capital,
    currency_name: row3.currency_name, 
    nationality: row3.nationality, 
    latitude: row3.latitude, 
    longitude: row3.longitude
})
CREATE (cou)-[:BELONGS_TO_CONTINENT]->(cont)
CREATE (cou)-[:BELONGS_TO_SUBCONTINENT]->(sub);

// import states from states.csv and connect them to countries
LOAD CSV WITH HEADERS FROM 'file:///states.csv' AS row4
MATCH (cou:Country {id: row4.country_id})
CREATE (sta:State {
    id: row4.id,
    name: row4.name,
    type: row4.type,
    latitude: row4.latitude,
    longitude: row4.longitude
})
CREATE (sta)-[:BELONGS_TO_COUNTRY]->(cou);

// create indexes to speed up the import of cities.csv
CREATE INDEX country_id_idx IF NOT EXISTS FOR (country:Country) ON (country.id);
CREATE INDEX state_id_idx IF NOT EXISTS FOR (state:State) ON (state.id);

// import cities from cities.csv and connect them to countries and states
LOAD CSV WITH HEADERS FROM 'file:///cities.csv' AS row5
MATCH (cou:Country {id: row5.country_id})
MATCH (sta:State {id: row5.state_id})
CREATE (cit:City {
    id: row5.id,
    name: row5.name,
    country_id: row5.country_id,
    latitude: row5.latitude,
    longitude: row5.longitude
})
CREATE (cit)-[:BELONGS_TO_COUNTRY]->(cou)
CREATE (cit)-[:BELONGS_TO_STATE]->(sta);

// drop the indexes
DROP INDEX country_id_idx;
DROP INDEX state_id_idx;

// Script 2) create cities for capitals not in City, then create edges HAS_CAPITAL and BELONGS_TO_COUNTRY between the new cities and their country
MATCH (n)
WITH max(toInteger(n.id)) AS maxId
MATCH (c:Country)
WHERE NOT EXISTS {
    MATCH (ci:City)
    WHERE c.capital = ci.name
} AND c.capital IS NOT NULL
WITH c, maxId+1 as maxId
CREATE (newCity:City {id: maxId, name:c.capital, latitude: c.latitude, longitude: c.longitude, country_id: c.country_id})
CREATE (c)-[:HAS_CAPITAL]->(newCity)
CREATE (newCity)-[:BELONGS_TO_COUNTRY]->(c);


// Script 3) create HAS_CAPITAL edge for the cities already present in the database, excluding repetitions of multiple cities with same name and same country: For each country, the edge is created only for the first appearance of a city // that has name = capital
MATCH (country:Country)
WHERE NOT EXISTS {
    MATCH (country)-[:HAS_CAPITAL]->(:City)
}
WITH country
MATCH (city:City)
WHERE city.country_id = country.id AND city.name = country.capital
WITH country, city
ORDER BY city.id
WITH country, collect(city)[0] AS firstCity
CREATE (country)-[:HAS_CAPITAL]->(firstCity)
RETURN country.name AS Country, firstCity.name AS City;


// Script 4) remove useless properties: country_id and capital
MATCH (country:Country)
REMOVE country.capital;
MATCH (city:City)
REMOVE city.country_id;