HOW TO IMPORT THE CSV:

0) create your_dbms on neo4j

1) add all the csv files in .../dbmss/your_dbms/import

2) add a the end of the file .../dbmss/your_dbms/conf/neo4j.conf the following line: 'dbms.memory.transaction.total.max=0'
this is so expand the neo4j memory to allow the import of cities.csv


3) run the following script (JUST ONE TIME):

// Import continents from continents.csv
LOAD CSV WITH HEADERS FROM 'file:///continents.csv' AS row1
CREATE (cont:Continent {id:row1.id, name:row1.name});

// Import subcontinents from subcontinents.csv and connect them to continents
LOAD CSV WITH HEADERS FROM 'file:///subcontinents.csv' AS row2
MATCH (cont:Continent {id: row2.continent_id})
CREATE (sub:Subcontinent {id: row2.id, name: row2.name})
CREATE (sub)-[:BELONGS_TO_CONTINENT]->(cont);

// import countries from countries.csv and connect them to continents and subcontinents
LOAD CSV WITH HEADERS FROM 'file:///countries.csv' AS row3
MATCH (cont:Continent {id: row3.continent_id})
MATCH (sub:Subcontinent {id: row3.subcontinent_id})
CREATE (cou:Country {
    id: row3.id, 
    name: row3.name, 
    iso3: row3.iso3, 
    phone_code: row3.phone_code, 
    capital: COALESCE(row3.capital, ''),
    currency_name: row3.currency_name, 
    nationality: row3.nationality, 
    latitude: row3.latitude, 
    longitude: row3.longitude
})
CREATE (cou)-[:BELONGS_TO_CONTINENT]->(cont)
CREATE (cou)-[:BELONGS_TO_SUBCONTINENT]->(sub);

// import states from states.csv and connect them to countries
LOAD CSV WITH HEADERS FROM 'file:///states.csv' AS row4
MATCH (cou:Country {id: row4.country_id})
CREATE (sta:State {
    id: row4.id,
    name: row4.name,
    type: COALESCE(row4.type, ''),
    latitude: COALESCE(row4.latitude, ''),
    longitude: COALESCE(row4.longitude, '')
})
CREATE (sta)-[:BELONGS_TO_COUNTRY]->(cou);

// create indexes to speed up the import of cities.csv
CREATE INDEX country_id_idx IF NOT EXISTS FOR (country:Country) ON (country.id);
CREATE INDEX state_id_idx IF NOT EXISTS FOR (state:State) ON (state.id);

// import cities from cities.csv and connect them to countries and states
LOAD CSV WITH HEADERS FROM 'file:///cities.csv' AS row5
MATCH (cou:Country {id: row5.country_id})
MATCH (sta:State {id: row5.state_id})
CREATE (cit:City {
    id: row5.id,
    name: row5.name,
    latitude: COALESCE(row5.latitude, ''),
    longitude: COALESCE(row5.longitude, '')
})
CREATE (cit)-[:BELONGS_TO_COUNTRY]->(cou)
CREATE (cit)-[:BELONGS_TO_STATE]->(sta);

// drop the indexes
DROP INDEX country_id_idx;
DROP INDEX state_id_idx;